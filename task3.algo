FUNCTION jump_search(arr : ARRAY_OF INTEGER, x : INTEGER) : INTEGER
VAR
    step, prev,n :INTEGER;
BEGIN
    n := arr.length;
    // Finding block size to be jumped 
    step := sqrt(n); // sqrt square root
    // Finding the block where element is 
    // present (if it is present) 
    prev := 0;
    WHILE (arr[min(step,n)-1] < x) DO
        prev := step;
        step := step + sqrt(n);
        IF (prev >= n) THEN
            RETURN -1;
        END_IF
    END_WHILE

    // Doing a linear search for x in block 
    // beginning with prev. 
    WHILE (arr[prev] < x) DO
        prev := prev +1;
        // If we reached next block or end of 
        // array, element is not present.
        IF (prev = min(step,n)) THEN
            RETURN -1;
        END_IF
    END_WHILE
    // If element is found 
    IF (arr[prev] = x) THEN
        RETURN prev;
    END_IF

    RETURN -1 ;
END